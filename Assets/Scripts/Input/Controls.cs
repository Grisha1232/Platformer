//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""05f2939b-7e46-4234-b634-c900b11c357e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d3a23dfd-3c4d-4d60-8d3c-28f2ebebc55d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7a1d87c9-3f3f-447b-9cb3-99c6a162f65f"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""edc1a530-1c5a-4143-bb60-a8181efc3d8a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8361bc22-7e2d-4547-ba43-91deb24f6f70"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2c790a97-0581-48b1-89bc-1fea7dc82821"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f7a22dea-75dc-4433-88de-87dbfa833d08"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow keys"",
                    ""id"": ""30371e45-ffc6-4341-bd42-f624c3d08e6d"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1a38bfc9-d130-4045-8f33-1d8792387363"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d0c98171-0b73-408b-a9d6-8d6a884409ca"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d4b9c8e8-3972-4fb7-8cde-3575bfb8ab1e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""50d6ec0b-3415-4f7e-b965-d59440a378a7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad LeftStick"",
                    ""id"": ""85cf0f36-6010-4928-b385-d718e5d53280"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5c6a97fb-a8ce-48ff-b55b-0696d4cc0e57"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0fb1842-151e-43e3-b4d9-5accb36991b9"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d3b31007-4634-484f-9db3-c4f3216da8c6"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7f3c3f41-5c7c-4589-91c0-898de2355982"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Jumping"",
            ""id"": ""9bb9322e-906d-4a7c-b193-49d614b1ed05"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a6a54db1-3e1d-4b80-95f5-7f43940892e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76d5a674-5dc5-497f-bfaf-87db73f10045"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78eeb6be-9420-4012-bfd8-439337c40f7c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dashing"",
            ""id"": ""582d0fec-8913-496a-9903-fe6baaecc857"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""09c3c753-5155-47aa-ad39-0e81ba343c94"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01ca7474-f454-4d1f-a1e5-3fd3e17ff1c8"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13c8dc8a-44f5-47ae-94d5-9236bc4ae8d2"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attacking"",
            ""id"": ""a2e56814-a498-4483-a462-0f4334434bbe"",
            ""actions"": [
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""59176791-17b0-489d-bc85-bbe9100158cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StrongAttack"",
                    ""type"": ""Button"",
                    ""id"": ""2714d707-5df6-4a9c-8138-7303ccb2dd43"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92926642-2dd8-47b0-aeff-5c544332f4c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28bea337-0afe-4621-9d9c-6454088a1a52"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c32e004-c08f-4e35-b738-2bbc491de56f"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""StrongAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""797a780d-6941-44e5-8801-c88655ad1851"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""StrongAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI interactive"",
            ""id"": ""2ebf00d9-797a-47e0-8fc5-8848b31fbcd9"",
            ""actions"": [
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""6ef962ca-a6d7-4ee8-a9ad-32f762f1e8eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""232daaf7-7424-4f4f-ba04-b7de1b2c1068"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuLeft"",
                    ""type"": ""Button"",
                    ""id"": ""0cae3b66-4fd3-48ea-a80b-43bffd4ac07f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuRight"",
                    ""type"": ""Button"",
                    ""id"": ""b78199ce-d27f-4d20-89c7-c3098f61a00c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuUp"",
                    ""type"": ""Button"",
                    ""id"": ""1148b56b-e336-487a-9f10-0996cea8edc5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuDown"",
                    ""type"": ""Button"",
                    ""id"": ""7f2d8ce7-e394-4ccf-a4ed-2adcfedfc72d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c80c078a-ab40-4716-9acd-63ea8be46418"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c1b7f46-5f3e-429d-8d98-d5e10bb59327"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ae4275b-6864-4b18-9994-bea37d3f1dc4"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9520287d-a81e-4618-98e2-d87ba4aac082"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41355de6-f2da-4347-a254-8ea5676a0d93"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MenuLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0c41829-2a4d-4677-9a30-f475ecfa09c9"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MenuRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dcfa1d4-5f2f-40fb-a154-9d92c009f673"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MenuUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc87ee3e-e939-4c60-9a71-dc66e075a7fd"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MenuDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameInteraction"",
            ""id"": ""b693ebfb-f0c9-4495-b480-c806bea54d51"",
            ""actions"": [
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""43b43f5d-e5ca-4d41-bc2f-caf023d0b89e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseHeal"",
                    ""type"": ""Button"",
                    ""id"": ""d0c74121-686a-40ea-95e1-c093a7c3f8bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""8fed9da3-0b43-410e-9f6b-8919d91a5b2a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchItem"",
                    ""type"": ""Button"",
                    ""id"": ""9093a083-4c3d-430c-a7fd-6e918acb77f2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""32a9a570-e4a1-425b-aca4-e7ce274d97fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23e44869-e002-485a-b10c-70a90cf6d89d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0ebbcf8-a56e-454c-a455-4a36ee2b0c6a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a0061f1-7420-441c-9204-129613d5ef06"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""UseHeal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0a59f90-c8ce-4ee4-a223-b5b4f0d9eef3"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""UseHeal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8667ba21-1acb-4249-a1c1-ff69330e8c30"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dfcdf23-505e-4bbb-a113-a9126faded7f"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aef7388c-ba21-47f4-86cd-e7ce26152389"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""SwitchItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94c6d644-a9c0-412b-8043-432b7a59a9ae"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""SwitchItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3adae613-a0a5-483d-ab8f-1066a182dc3c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee33075c-b3c7-40db-8956-7c4d13bfd2e5"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Jumping
        m_Jumping = asset.FindActionMap("Jumping", throwIfNotFound: true);
        m_Jumping_Jump = m_Jumping.FindAction("Jump", throwIfNotFound: true);
        // Dashing
        m_Dashing = asset.FindActionMap("Dashing", throwIfNotFound: true);
        m_Dashing_Dash = m_Dashing.FindAction("Dash", throwIfNotFound: true);
        // Attacking
        m_Attacking = asset.FindActionMap("Attacking", throwIfNotFound: true);
        m_Attacking_LightAttack = m_Attacking.FindAction("LightAttack", throwIfNotFound: true);
        m_Attacking_StrongAttack = m_Attacking.FindAction("StrongAttack", throwIfNotFound: true);
        // UI interactive
        m_UIinteractive = asset.FindActionMap("UI interactive", throwIfNotFound: true);
        m_UIinteractive_PauseMenu = m_UIinteractive.FindAction("PauseMenu", throwIfNotFound: true);
        m_UIinteractive_Back = m_UIinteractive.FindAction("Back", throwIfNotFound: true);
        m_UIinteractive_MenuLeft = m_UIinteractive.FindAction("MenuLeft", throwIfNotFound: true);
        m_UIinteractive_MenuRight = m_UIinteractive.FindAction("MenuRight", throwIfNotFound: true);
        m_UIinteractive_MenuUp = m_UIinteractive.FindAction("MenuUp", throwIfNotFound: true);
        m_UIinteractive_MenuDown = m_UIinteractive.FindAction("MenuDown", throwIfNotFound: true);
        // GameInteraction
        m_GameInteraction = asset.FindActionMap("GameInteraction", throwIfNotFound: true);
        m_GameInteraction_UseItem = m_GameInteraction.FindAction("UseItem", throwIfNotFound: true);
        m_GameInteraction_UseHeal = m_GameInteraction.FindAction("UseHeal", throwIfNotFound: true);
        m_GameInteraction_SwitchWeapon = m_GameInteraction.FindAction("SwitchWeapon", throwIfNotFound: true);
        m_GameInteraction_SwitchItem = m_GameInteraction.FindAction("SwitchItem", throwIfNotFound: true);
        m_GameInteraction_Interact = m_GameInteraction.FindAction("Interact", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Movement.enabled, "This will cause a leak and performance issues, Controls.Movement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Jumping.enabled, "This will cause a leak and performance issues, Controls.Jumping.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Dashing.enabled, "This will cause a leak and performance issues, Controls.Dashing.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Attacking.enabled, "This will cause a leak and performance issues, Controls.Attacking.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UIinteractive.enabled, "This will cause a leak and performance issues, Controls.UIinteractive.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GameInteraction.enabled, "This will cause a leak and performance issues, Controls.GameInteraction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @Controls m_Wrapper;
        public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Jumping
    private readonly InputActionMap m_Jumping;
    private List<IJumpingActions> m_JumpingActionsCallbackInterfaces = new List<IJumpingActions>();
    private readonly InputAction m_Jumping_Jump;
    public struct JumpingActions
    {
        private @Controls m_Wrapper;
        public JumpingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Jumping_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Jumping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpingActions set) { return set.Get(); }
        public void AddCallbacks(IJumpingActions instance)
        {
            if (instance == null || m_Wrapper.m_JumpingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JumpingActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IJumpingActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IJumpingActions instance)
        {
            if (m_Wrapper.m_JumpingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJumpingActions instance)
        {
            foreach (var item in m_Wrapper.m_JumpingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JumpingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JumpingActions @Jumping => new JumpingActions(this);

    // Dashing
    private readonly InputActionMap m_Dashing;
    private List<IDashingActions> m_DashingActionsCallbackInterfaces = new List<IDashingActions>();
    private readonly InputAction m_Dashing_Dash;
    public struct DashingActions
    {
        private @Controls m_Wrapper;
        public DashingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dash => m_Wrapper.m_Dashing_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Dashing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DashingActions set) { return set.Get(); }
        public void AddCallbacks(IDashingActions instance)
        {
            if (instance == null || m_Wrapper.m_DashingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DashingActionsCallbackInterfaces.Add(instance);
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IDashingActions instance)
        {
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IDashingActions instance)
        {
            if (m_Wrapper.m_DashingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDashingActions instance)
        {
            foreach (var item in m_Wrapper.m_DashingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DashingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DashingActions @Dashing => new DashingActions(this);

    // Attacking
    private readonly InputActionMap m_Attacking;
    private List<IAttackingActions> m_AttackingActionsCallbackInterfaces = new List<IAttackingActions>();
    private readonly InputAction m_Attacking_LightAttack;
    private readonly InputAction m_Attacking_StrongAttack;
    public struct AttackingActions
    {
        private @Controls m_Wrapper;
        public AttackingActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LightAttack => m_Wrapper.m_Attacking_LightAttack;
        public InputAction @StrongAttack => m_Wrapper.m_Attacking_StrongAttack;
        public InputActionMap Get() { return m_Wrapper.m_Attacking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackingActions set) { return set.Get(); }
        public void AddCallbacks(IAttackingActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackingActionsCallbackInterfaces.Add(instance);
            @LightAttack.started += instance.OnLightAttack;
            @LightAttack.performed += instance.OnLightAttack;
            @LightAttack.canceled += instance.OnLightAttack;
            @StrongAttack.started += instance.OnStrongAttack;
            @StrongAttack.performed += instance.OnStrongAttack;
            @StrongAttack.canceled += instance.OnStrongAttack;
        }

        private void UnregisterCallbacks(IAttackingActions instance)
        {
            @LightAttack.started -= instance.OnLightAttack;
            @LightAttack.performed -= instance.OnLightAttack;
            @LightAttack.canceled -= instance.OnLightAttack;
            @StrongAttack.started -= instance.OnStrongAttack;
            @StrongAttack.performed -= instance.OnStrongAttack;
            @StrongAttack.canceled -= instance.OnStrongAttack;
        }

        public void RemoveCallbacks(IAttackingActions instance)
        {
            if (m_Wrapper.m_AttackingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackingActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackingActions @Attacking => new AttackingActions(this);

    // UI interactive
    private readonly InputActionMap m_UIinteractive;
    private List<IUIinteractiveActions> m_UIinteractiveActionsCallbackInterfaces = new List<IUIinteractiveActions>();
    private readonly InputAction m_UIinteractive_PauseMenu;
    private readonly InputAction m_UIinteractive_Back;
    private readonly InputAction m_UIinteractive_MenuLeft;
    private readonly InputAction m_UIinteractive_MenuRight;
    private readonly InputAction m_UIinteractive_MenuUp;
    private readonly InputAction m_UIinteractive_MenuDown;
    public struct UIinteractiveActions
    {
        private @Controls m_Wrapper;
        public UIinteractiveActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseMenu => m_Wrapper.m_UIinteractive_PauseMenu;
        public InputAction @Back => m_Wrapper.m_UIinteractive_Back;
        public InputAction @MenuLeft => m_Wrapper.m_UIinteractive_MenuLeft;
        public InputAction @MenuRight => m_Wrapper.m_UIinteractive_MenuRight;
        public InputAction @MenuUp => m_Wrapper.m_UIinteractive_MenuUp;
        public InputAction @MenuDown => m_Wrapper.m_UIinteractive_MenuDown;
        public InputActionMap Get() { return m_Wrapper.m_UIinteractive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIinteractiveActions set) { return set.Get(); }
        public void AddCallbacks(IUIinteractiveActions instance)
        {
            if (instance == null || m_Wrapper.m_UIinteractiveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIinteractiveActionsCallbackInterfaces.Add(instance);
            @PauseMenu.started += instance.OnPauseMenu;
            @PauseMenu.performed += instance.OnPauseMenu;
            @PauseMenu.canceled += instance.OnPauseMenu;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @MenuLeft.started += instance.OnMenuLeft;
            @MenuLeft.performed += instance.OnMenuLeft;
            @MenuLeft.canceled += instance.OnMenuLeft;
            @MenuRight.started += instance.OnMenuRight;
            @MenuRight.performed += instance.OnMenuRight;
            @MenuRight.canceled += instance.OnMenuRight;
            @MenuUp.started += instance.OnMenuUp;
            @MenuUp.performed += instance.OnMenuUp;
            @MenuUp.canceled += instance.OnMenuUp;
            @MenuDown.started += instance.OnMenuDown;
            @MenuDown.performed += instance.OnMenuDown;
            @MenuDown.canceled += instance.OnMenuDown;
        }

        private void UnregisterCallbacks(IUIinteractiveActions instance)
        {
            @PauseMenu.started -= instance.OnPauseMenu;
            @PauseMenu.performed -= instance.OnPauseMenu;
            @PauseMenu.canceled -= instance.OnPauseMenu;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @MenuLeft.started -= instance.OnMenuLeft;
            @MenuLeft.performed -= instance.OnMenuLeft;
            @MenuLeft.canceled -= instance.OnMenuLeft;
            @MenuRight.started -= instance.OnMenuRight;
            @MenuRight.performed -= instance.OnMenuRight;
            @MenuRight.canceled -= instance.OnMenuRight;
            @MenuUp.started -= instance.OnMenuUp;
            @MenuUp.performed -= instance.OnMenuUp;
            @MenuUp.canceled -= instance.OnMenuUp;
            @MenuDown.started -= instance.OnMenuDown;
            @MenuDown.performed -= instance.OnMenuDown;
            @MenuDown.canceled -= instance.OnMenuDown;
        }

        public void RemoveCallbacks(IUIinteractiveActions instance)
        {
            if (m_Wrapper.m_UIinteractiveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIinteractiveActions instance)
        {
            foreach (var item in m_Wrapper.m_UIinteractiveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIinteractiveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIinteractiveActions @UIinteractive => new UIinteractiveActions(this);

    // GameInteraction
    private readonly InputActionMap m_GameInteraction;
    private List<IGameInteractionActions> m_GameInteractionActionsCallbackInterfaces = new List<IGameInteractionActions>();
    private readonly InputAction m_GameInteraction_UseItem;
    private readonly InputAction m_GameInteraction_UseHeal;
    private readonly InputAction m_GameInteraction_SwitchWeapon;
    private readonly InputAction m_GameInteraction_SwitchItem;
    private readonly InputAction m_GameInteraction_Interact;
    public struct GameInteractionActions
    {
        private @Controls m_Wrapper;
        public GameInteractionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseItem => m_Wrapper.m_GameInteraction_UseItem;
        public InputAction @UseHeal => m_Wrapper.m_GameInteraction_UseHeal;
        public InputAction @SwitchWeapon => m_Wrapper.m_GameInteraction_SwitchWeapon;
        public InputAction @SwitchItem => m_Wrapper.m_GameInteraction_SwitchItem;
        public InputAction @Interact => m_Wrapper.m_GameInteraction_Interact;
        public InputActionMap Get() { return m_Wrapper.m_GameInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IGameInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_GameInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameInteractionActionsCallbackInterfaces.Add(instance);
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
            @UseHeal.started += instance.OnUseHeal;
            @UseHeal.performed += instance.OnUseHeal;
            @UseHeal.canceled += instance.OnUseHeal;
            @SwitchWeapon.started += instance.OnSwitchWeapon;
            @SwitchWeapon.performed += instance.OnSwitchWeapon;
            @SwitchWeapon.canceled += instance.OnSwitchWeapon;
            @SwitchItem.started += instance.OnSwitchItem;
            @SwitchItem.performed += instance.OnSwitchItem;
            @SwitchItem.canceled += instance.OnSwitchItem;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IGameInteractionActions instance)
        {
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
            @UseHeal.started -= instance.OnUseHeal;
            @UseHeal.performed -= instance.OnUseHeal;
            @UseHeal.canceled -= instance.OnUseHeal;
            @SwitchWeapon.started -= instance.OnSwitchWeapon;
            @SwitchWeapon.performed -= instance.OnSwitchWeapon;
            @SwitchWeapon.canceled -= instance.OnSwitchWeapon;
            @SwitchItem.started -= instance.OnSwitchItem;
            @SwitchItem.performed -= instance.OnSwitchItem;
            @SwitchItem.canceled -= instance.OnSwitchItem;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IGameInteractionActions instance)
        {
            if (m_Wrapper.m_GameInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_GameInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameInteractionActions @GameInteraction => new GameInteractionActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IJumpingActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IDashingActions
    {
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IAttackingActions
    {
        void OnLightAttack(InputAction.CallbackContext context);
        void OnStrongAttack(InputAction.CallbackContext context);
    }
    public interface IUIinteractiveActions
    {
        void OnPauseMenu(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnMenuLeft(InputAction.CallbackContext context);
        void OnMenuRight(InputAction.CallbackContext context);
        void OnMenuUp(InputAction.CallbackContext context);
        void OnMenuDown(InputAction.CallbackContext context);
    }
    public interface IGameInteractionActions
    {
        void OnUseItem(InputAction.CallbackContext context);
        void OnUseHeal(InputAction.CallbackContext context);
        void OnSwitchWeapon(InputAction.CallbackContext context);
        void OnSwitchItem(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
